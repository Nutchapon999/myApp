@model IEnumerable<myApp.Models.Enrollment>
@{
    ViewBag.Title = "Info";
}
<div class="sticky-header-breadcrumb">
    <div class="row">
        <div class="col-auto me-auto">
            <nav aria-label="breadcrumb" style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='%236c757d'/%3E%3C/svg%3E&#34; );">
                <ol class="breadcrumb breadcrumb-chevron bg-body-tertiary ms-3 mt-3">
                    <li class="breadcrumb-item">
                        <a class="link-body-emphasis text-decoration-none" href="@Url.Action("Employee")">
                            <i class="fa fa-users" style="color: #C8E8FF"></i> <strong style="color: #C8E8FF">Employee</strong>
                            <span class="visually-hidden">Home</span>
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a class="link-body-emphasis text-decoration-none" style="color: #C8E8FF" href="@Url.Action("Info", new { id = ViewBag.Id, year = ViewBag.Year })"><strong>ข้อมูลพนักงาน</strong></a>
                    </li>
                </ol>
            </nav>
        </div>
        <div class="col-auto">
            <ul class="nav align-items-center text-center me-2 py-2" >
                <li class="nav-item me-2">
                    <a class="nav-link" href="@Url.Action("Info", new { id = ViewBag.Id, year = (DateTime.Now.Year + 543).ToString()})">@(DateTime.Now.Year + 543)</a>
                </li>
                <li class="nav-item me-2">
                    <a class="nav-link" href="@Url.Action("Info", new { id = ViewBag.Id, year = (DateTime.Now.Year + 542).ToString()})">@(DateTime.Now.Year + 542)</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="@Url.Action("Info", new { id = ViewBag.Id, year = (DateTime.Now.Year + 541).ToString()})">@(DateTime.Now.Year + 541)</a>
                </li>
            </ul>
        </div>
    </div>
</div>
<main>
    @{
        var enrollmentsGrouped = Model.GroupBy(e => e.EnrollId);
    }
</main>
    
    <div class="mt-5">
        @foreach (var group in enrollmentsGrouped)
        {
            <h3>Enrollment ID: @group.Key</h3>
            <h2>@(ViewBag.Year)</h2>
            <table>
                <thead>
                    <tr>
                        <th rowspan="2">Critical</th>
                        <th rowspan="2">Competency ID</th>
                        <th rowspan="2">Competency Name</th>
                        <th rowspan="2">R</th>
                        <th rowspan="2">A</th>
                        <th colspan="2">GAP</th>
                        <th rowspan="2">Priority</th>
                        <th rowspan="2">Plan</th>
                        <th rowspan="2">Plan Description</th>
                        <th colspan="4">Quarter</th>
                        <th rowspan="2">Result Plan</th>
                    </tr>
                    <tr>
                        <th>-</th>
                        <th>+</th>
                        <th>Q1</th>
                        <th>Q2</th>
                        <th>Q3</th>
                        <th>Q4</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var enroll in group)
                    {
                        <tr>
                            <td>
                                @if (enroll.IDPGroupItem.Critical == false)
                                {
                                    <text></text>
                                }
                                else
                                {
                                    <img src="~/Images/hexagon_icon.png" width="25" height="25" />
                                }
                            </td>
                            <td>@enroll.IDPGroupItem.CompetencyId</td>
                            <td>@enroll.Competency.CompetencyNameTH</td>
                            <td>@enroll.IDPGroupItem.Pl</td>
                            <td>@enroll.ResultItem.Actual</td>
                            <td>
                                @if (enroll.ResultItem.Gap < 0)
                                {
                                    @enroll.ResultItem.Gap
                                }
                            </td>
                            <td>
                                @if (enroll.ResultItem.Gap >= 0)
                                {
                                    @enroll.ResultItem.Gap
                                }
                            </td>
                            <td>@enroll.ResultItem.Priority</td>
                            <td>@enroll.ResultItem.Plan</td>
                            <td>@enroll.ResultItem.PlanDesc</td>
                            <td>
                                @if (enroll.ResultItem.Q1 == "1")
                                {
                                    <i class="fa fa-check" aria-hidden="true"></i>
                                }
                            </td>
                            <td>
                                @if (enroll.ResultItem.Q2 == "1")
                                {
                                    <i class="fa fa-check" aria-hidden="true"></i>
                                }
                            </td>
                            <td>
                                @if (enroll.ResultItem.Q3 == "1")
                                {
                                    <i class="fa fa-check" aria-hidden="true"></i>
                                }
                            </td>
                            <td>
                                @if (enroll.ResultItem.Q4 == "1")
                                {
                                    <i class="fa fa-check" aria-hidden="true"></i>
                                }
                            </td>
                            <td>@enroll.ResultItem.RstPlan</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="container" style="background-color: #96D4D4">
                <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                <canvas id="pieChart-@group.Key"></canvas>
                <script>
            var competencyData = {
                labels: [@foreach (var enroll in group) { <text>'@enroll.Competency.CompetencyNameTH'</text>if (!ReferenceEquals(enroll, group.Last())) { <text>,</text> } }],
                datasets: [{
                    label: 'Actual',
                    data: [@foreach (var enroll in group) { <text>@(enroll.ResultItem.Actual)</text>if (!ReferenceEquals(enroll, group.Last())) { <text>,</text> } }],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.5)',
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                    ],
                    borderWidth: 2,
                }]
            };

            var pieChartOptions = {
                plugins: {
                    title: {
                        display: true,
                        text: 'Competency Chart',
                    },
                    labels: {
                        render: 'outside',
                        arc: true,
                        fontColor: 'black',
                        fontStyle: 'bold',
                        position: 'outside',
                    },
                },
                scales: {
                    r: {
                        beginAtZero: true,
                        max: 5,
                        stepSize: 1,
                        ticks: {
                            precision: 0,
                        },
                    },
                },
            };

            var pieChart = new Chart(document.getElementById('pieChart-@group.Key'), {
                type: 'radar',
                data: competencyData,
                options: pieChartOptions
            });

                </script>
            </div>

        }
    </div>
    @{
        //var totalEnrollmentCount = enrollmentsGrouped.Sum(g => g.Count(enroll => enroll.Finish));
        //var competencyPassCount = enrollmentsGrouped.Sum(g => g.Count(enroll => enroll.Finish && enroll.Form.Actual >= Convert.ToInt32(enroll.CompetencyItem.Pl)));
        //var competencyPassPercentage = (competencyPassCount * 100.0) / totalEnrollmentCount;
    }

    <!--<table>
        <tbody>
            <tr>
                <th>Competency All</th>
                <td>totalEnrollmentCount</td>
            </tr>
            <tr>
                <th>Competency Pass</th>
                <td>competencyPassCount</td>
            </tr>
            <tr>
                <th>% Competency</th>
                <td>competencyPassPercentage.ToString("0.00")%</td>
            </tr>
            <tr>
                <th>>100%</th>
                <td rowspan="3">
                    if (competencyPassPercentage >= 100)
                    {
                        <text>M</text>
                    }
                    else if (competencyPassPercentage < 100 && competencyPassPercentage >= 70)
                    {
                        <text>C</text>
                    }
                    else
                    {
                        <text>L</text>
                    }
                </td>
            </tr>
            <tr>
                <th>>70%&#60;100%</th>
            </tr>
            <tr>
                <th>&#60;70%</th>
            </tr>
        </tbody>
    </table>-->
    <div class="container" style="width: 800px; height:800px">
        <canvas id="chart"></canvas>
    </div>

    <style>
        table, th, td {
            border: 1px solid white;
            border-collapse: collapse;
        }

        th, td {
            background-color: #96D4D4;
        }

        .dashboard {
            display: flex;
            justify-content: space-around;
            align-items: center;
            background-color: #f2f2f2;
            padding: 20px;
        }

        .dashboard-item {
            text-align: center;
        }

        .dashboard-item-icon {
            font-size: 48px;
            margin-bottom: 10px;
        }

        .dashboard-item-value {
            font-size: 24px;
        }
        .sticky-header-breadcrumb {
            position: sticky;
            z-index: 100;
            border-radius: 0px;
            top: 85px;
            background-color: #2D4686;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!--<script>
        var canvas = document.getElementById("chart");

        var competencyAll = totalEnrollmentCount;
        var competencyPass = competencyPassCount;
        var competencyFail = competencyAll - competencyPass;

        var maxScale = competencyAll > 0 ? competencyAll : 1;

        var chart = new Chart(canvas, {
            type: 'bar',
            data: {
                labels: ['Pass', 'Fail'],
                datasets: [{
                    label: 'Competency Result',
                    data: [competencyPass, competencyFail],
                    backgroundColor: ['#4bc0c0', '#ff6384'],
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        max: maxScale
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeOutQuart'
                }
            }
        });
    </script>-->
